#:next // Jump to address stored in next instruction (JUMPN)

#:dict-pointer
#NOP
# How to handle variables?
# How to start executing after the dictionary?
# PUSHR & POPR

#:docol (vs. call)
# PUSHR instruction pointer
# JMPN
#:_start
# Start address of program execution
# Will insert:
# JMPN
# @_start
# as first two instructions
:exit
	exit
:return
	return
:dup
	dup
	next
:add
	add
	next
:double
	docol
	@dup
	@add
	@return

:quadruple
	docol
	@double
	@double
	@exit

# What I want:
#:double
#	docol
#	dup
#	add
#	return
	
:_start
7
!quadruple
exit