#:next // Jump to address stored in next instruction (JUMPN)

#:dict-pointer
#NOP
# How to handle variables?
# How to start executing after the dictionary?
# PUSHR & POPR

#:docol (vs. call)
# PUSHR instruction pointer
# JMPN
#:_start
# Start address of program execution
# Will insert:
# JMPN
# @_start
# as first two instructions
:loop

:add-sub
5
8
add
1
subtract

:_start
:jump-target
1
nop
2
add

@loop
