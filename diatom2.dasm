const
-1
cjmp
@start

( Machine words )
.codeword +w const 4 + .end

( Reserve 11 bytes for the buffer of our 'word' word. )
.var word-buffer 0 .end
nop nop nop nop
nop nop nop nop
nop nop
.var word-cursor 0 .end

.codeword word-cursor+1 !word-cursor @ const 1 + dup !word-cursor ! .end
.codeword reset-word-cursor const 0 !word-cursor ! .end
.codeword store-in-word !word-buffer !word-cursor+1 !+w + b! .end
.codeword finish-word !word-cursor @ !word-buffer ! !reset-word-cursor .end
.codeword is-blank? const 32 = .end
.codeword non-blank-key
  key dup const 32 = ~ cjmp @nbk1
  drop const -1 cjmp @_dictnon-blank-key :nbk1
.end
.codeword word
  !non-blank-key
  :word1 !store-in-word
  key dup !is-blank? ~ cjmp @word1
  drop !finish-word !word-buffer
.end

.var emit-word-cursor 0 .end
.codeword reset-emit-word-cursor const 0 !emit-word-cursor ! .end
.codeword emit-word-cursor+1
  !emit-word-cursor @ const 1 +
  !emit-word-cursor !
  !emit-word-cursor @
.end
.codeword emit-word
  !reset-emit-word-cursor
  :emit-word1 !word-buffer @ !emit-word-cursor+1 > ~ cjmp @emit-word2
  !word-buffer !emit-word-cursor @ !+w + b@ emit
  const -1 cjmp @emit-word1
  :emit-word2
.end

.codeword pow
  dup const 1 = cjmp @pow-1
  swap dup rput swap
:pow-loop
  dup const 2 < cjmp @pow-end
  swap
  rpop dup rput *
  swap const 1 -
  const -1 cjmp @pow-loop
:pow-end
  drop
  rpop
  drop
  ret
:pow-1
  drop
  drop
  const 1
.end

(
.codeword number?
  const 48 - 0 9 < > | ( Check for valid range )
.end
.codeword number
  const 0 rput				( Store result on return stack )
  !word-buffer @ dup
  const 10 pow swap
  !word-buffer + b@
  dup number? ~ cjmp @number-err	( Check for valid range )
  const 48 - 

:number-err
  
.end
)

( TODO: Implement 'number'
.colonword number ???
)

( Built-in variables )
.var state 0 .end
.var latest 0 .end
.var here 0 .end
.var base 10 .end

( Built-in constants
# VERSION         Is the current version of this FORTH.
# R0              The +ress of the top of the return stack.
# DOCOL           Pointer to DOCOL.
# F_IMMED         The IMMEDIATE flag's actual value.
# F_HIDDEN        The HIDDEN flag's actual value.
# F_LENMASK       The length mask in the flags/len byte.
)

.const konstantin 77 .end
( .codeword main !word drop !emit-word exit .end )
.codeword main const 10 const 6 !pow .end
	   	
:start
call
@_dictmain
exit