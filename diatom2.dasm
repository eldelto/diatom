const
-1
cjmp
@start

( Instructions )
.codeword exit exit .end
.codeword @ @ .end
.codeword ! ! .end
.codeword + + .end
.codeword - - .end
.codeword * * .end
.codeword / / .end
.codeword % % .end
.codeword dup dup .end
.codeword drop drop .end
.codeword swap swap .end
.codeword over over .end
.codeword scall scall .end
.codeword ret ret .end
.codeword key key .end
.codeword emit emit .end
.codeword = = .end
.codeword ~ ~ .end
.codeword & & .end
.codeword | | .end
.codeword < < .end
.codeword > > .end
.codeword rpop rpop .end
.codeword rput rput .end
.codeword rpeek rpeek .end
.codeword b@ b@ .end
.codeword b! b! .end

( Machine words )
.codeword constw const 4 .end
.codeword w+ !constw + .end
.codeword 1+ const 1 + .end
.codeword 1- const 1 - .end
.codeword !1+ dup @ const 1 + swap ! .end
.codeword 2dup over over .end
.codeword 2drop drop drop .end
.codeword newline const 10 emit .end
.codeword spc const 32 emit .end
.codeword true const -1 .end
.codeword false const 0 .end

( Reserve 32 bytes for the buffer of our 'word' word. )
.var word-buffer 0 .end
nop nop nop nop
nop nop nop nop
nop nop nop nop
nop nop nop nop
nop nop nop nop
nop nop nop nop
nop nop nop nop
nop nop nop nop
.var word-cursor 0 .end

.codeword reset-word-cursor const 0 !word-cursor ! .end
.codeword store-in-word
  !word-buffer !word-cursor @ !w+ + b!
  !word-cursor !!1+
.end
.codeword finish-word !word-cursor @ !word-buffer ! !reset-word-cursor .end
.codeword is-blank? const 33 < .end
.codeword non-blank-key
  key dup !is-blank? ~ cjmp @nbk1
  drop const -1 cjmp @_dictnon-blank-key :nbk1
.end
.codeword word
  !non-blank-key
  :word1 !store-in-word
  key dup !is-blank? ~ cjmp @word1
  drop !finish-word !word-buffer
.end

.var emit-word-cursor 0 .end
.codeword reset-emit-word-cursor const 0 !emit-word-cursor ! .end
.codeword emit-word
  !reset-emit-word-cursor
  :emit-word1 !word-buffer @ !emit-word-cursor @ > ~ cjmp @emit-word2
  !word-buffer !emit-word-cursor @ !w+ + b@ emit
  !emit-word-cursor !!1+
  const -1 cjmp @emit-word1
  :emit-word2
.end

.codeword pow
  dup const 0 = cjmp @pow-1
  swap dup rput swap
:pow-loop
  dup const 2 < cjmp @pow-end
  swap
  rpop dup rput *
  swap const 1 -
  const -1 cjmp @pow-loop
:pow-end
  drop
  rpop
  drop
  ret
:pow-1
  drop
  drop
  const 1
.end

.codeword number?
  dup const 47 > swap const 58 < &
.end

.codeword negative-number?
  !word-buffer !w+ b@
  const 45 =
.end

.codeword unit
  cjmp @unit-t
  const 1
  ret
:unit-t
  const -1
.end

.codeword minus?
  const 45 =
.end

( TODO: Handle numbers that are too large )
.codeword number
  !negative-number?
  dup const -1 * rput	( Skip the first char if it is '-' )
  !unit			( 1 or -1 if '-' )
  const 0		( Init result )
:number-loop
  !word-buffer !w+ rpeek + b@				( Read char at offset rpeek )
  dup !number? ~ cjmp @number-err
  const 48 -
  const 10 !word-buffer @ const 1 - rpeek - !pow * +	( Scale digit at offset )
  rpop const 1 + rput
  rpeek !word-buffer @ < cjmp @number-loop
  *		  ( Negate if word started with '-' )
  const 0	  ( 0 to indicate no error )
  rpop drop
  ret
:number-err
  drop drop drop	( Cleanup )
  rpop drop
  const -1		( -1 to indicate error )
.end

.codeword digit-to-char
  const 10 %	( Get last digit )
  const 48 +	( Add '0' to it )
.end

.codeword digit-count
  dup const -1 > const 1 +
  swap

:digit-count-loop
  swap const 1 + swap
  const 10 /
  dup const 0 = ~ cjmp @digit-count-loop
  drop
.end

.codeword last-digit-to-word
  dup dup
  !digit-count const 1 -
  swap !digit-to-char
  swap !w+ !word-buffer + b!
  const 10 /
.end
.codeword number-to-word
  dup !digit-count	( Get number of digits )
  !word-buffer !	( Store future len in word-buffer )

:number-to-word-loop
  !last-digit-to-word
  dup const 0 > cjmp @number-to-word-loop

  drop !word-buffer
.end

.codeword char-at
  !1- !w+ + b@
.end

( TODO: Doesn't properly print negative numbers. )
.codeword .
  !number-to-word drop !emit-word
.end

( a b len -- bool )
.codeword mem=
  rput !false
:mem=-loop
  rpop !1- dup rput const 0 < cjmp @mem=-end
  drop
  over rpeek + b@
  over rpeek + b@
  = dup cjmp @mem=-loop

:mem=-end
rpop drop rput drop drop rpop
.end

( src dest len -- )
.codeword memcpy
  !1+ rput
:memcpy-loop
  rpop !1- dup rput const 0 < cjmp @memcpy-end
  over rpeek + b@
  over rpeek + b!
  !true cjmp @memcpy-loop

:memcpy-end
rpop drop drop drop
.end

( start end -- )
.codeword mem-view
  swap dup !.
  const 58 emit !spc
  dup b@ !.
  !newline
  !1+ swap !2dup > ~ cjmp @_dictmem-view
  !2drop
.end

( Takes the address past the prev-word pointer and compares it to the value
stored in 'word-buffer'. )
( addr -- bool )
.codeword word=
  ( The most significant bit is the immediate flag and we want to ignore it. )
  dup !1+
  swap b@ const 127 &
  !word-buffer !w+
  swap
  const 4444 drop
  !mem=
.end

.codeword prev-word @ .end

.codeword find
  !latest @

:find-loop
  dup const 0 = cjmp @find-end
  dup !w+ !word= cjmp @find-end
  !prev-word const -1 cjmp @find-loop

:find-end
  swap drop
  const 7777 drop
.end

( Takes the start address of a word and returns the addres of its code word. )
( addr -- addr )
.codeword codeword
  !w+ dup b@
  const 127 & ( Ignore the immediate flag. )
  + !1+
.end

.codeword interpret
  !word !find dup const 0 = cjmp @interpret-number
  dup !codeword
  swap !immediate? ~
  !state @ & cjmp @interpret-compile

( Interpret the word. )
  scall
  const -1 cjmp @_dictinterpret

:interpret-compile
  !,
  const -1 cjmp @_dictinterpret

:interpret-number
  drop
  !number
  cjmp @interpret-error
  const -1 cjmp @_dictinterpret

:interpret-error
.end

( Built-in variables )
.var state 0 .end
.var here @here-label .end
.var base 10 .end

( Built-in constants
# VERSION         Is the current version of this FORTH.
# R0              The +ress of the top of the return stack.
# DOCOL           Pointer to DOCOL.
# F_IMMED         The IMMEDIATE flag's actual value.
# F_HIDDEN        The HIDDEN flag's actual value.
# F_LENMASK       The length mask in the flags/len byte.
)


( Creates the header for a new word at the end of the dictionary.

                                            +-- Afterwards, HERE points here.
                                            |
                                            V
 +---------+---+---+---+---+---+---+---+---+
 | LINK    | 6 | D | O | U | B | L | E | 0 |
 +---------+---+---+---+---+---+---+---+---+
            len                         pad
)
( -- )
.codeword create
  !here @ !latest @ swap !
  !word-buffer const 3 + !here @ !w+ !word-buffer @ !memcpy
  !here dup @ !latest !
  dup dup @ !w+ dup b@ + !1+ swap !
.end

( Append a word to the end of the dictionary. )
( n -- )
.codeword ,
  !here @ !
  !here dup @ !w+ swap !
.end

( Append a single byte to the end of the dictionary. )
( n -- )
.codeword b,
  !here @ b!
  !here dup @ !1+ swap !
.end

( Disables compilation mode. )
( -- )
.codeword [
  !false !state !
.end

( Enables compilation mode. )
( -- )
.codeword ]
  !true !state !
.end

( Reads words from stdin and switches into compilation mode. )
( -- )
.codeword :
  !word !create
  !]
.end

( Sets the immediate flag of the latest word. )
( -- )
.immediate-codeword immediate
  !latest @ !w+ dup
  b@ const 128 |
  swap b!
.end

.codeword immediate?
  !w+ b@ const 128 &
  const 128 =
.end

( Appends 'ret' and ends compilation. )
( -- )
.immediate-codeword ;
  ( 2 is equal to the RET instruction )
  const 2 !b,
  ![
.end

( .codeword main !word drop !emit-word exit .end )
( .codeword main const 10 const 6 !pow .end )
( .codeword main !word drop const 9999 drop !number drop .end )
( .codeword main const 34 !number-to-word
  !word-buffer @
(  !word-buffer !w+ b@ emit )
(  !word-buffer !w+ const 1 + b@ emit )
  !emit-word
.end )

( .codeword main !word drop
 const @1+ !w+ const 9999 drop !word= .end )

.const konstantin 77 .end
( .codeword main !konstantin !here @ !latest @ .end )
( .codeword main !word drop const 9999 !find !codeword .end )
.codeword main !interpret .end
( .codeword main !word drop !number .end )
( .codeword main const 10 const 20 !mem-view .end )


( !!! No word definition shall stand beyond this mark. !!! )
( Except this one. )
.var yyy 999 .end
.var latest @latest .end

:start
call
@_dictmain
exit

( TODO:
  - Add compilation mode to 'interpret'
)


( !!! No code shall reach beyond this point or it will be overwritten. !!! )
:here-label

